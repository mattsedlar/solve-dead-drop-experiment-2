set.seed(50)
# this runs the simulate game function 100 times and stores the results in an object
simulations <- replicate(98,simulate.game(3))
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 100 times and stores the results in an object
simulations <- replicate(100,simulate.game(3))
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 100 times and stores the results in an object
simulations <- replicate(500,simulate.game(3))
x <- 1
while(x <= 500){
game.results <- rbind(game.results,
c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
# full Dead Drop deck
full.deck <- c(rep(0,4),rep(1,3),rep(2,2),rep(3,2),4,5)
x <- 1
while(x <= 500){
game.results <- rbind(game.results,
c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
View(game.results)
ggplot(game.results) + geom_bar(aes(X3))
ggplot(game.results) + geom_bar(aes(factor(X3)))
game.results <- data.frame(prob0=c(0),
prob1=c(0),
prob2=c(0),
prob3=c(0),
prob4=c(0),
prob5=c(0),
drop=c(0))
View(game.results)
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations <- replicate(500,simulate.game(3))
# now I'm going to loop through the results and bind them to my data frame
x <- 1
while(x <= 500){
game.results <- rbind(game.results,
c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results[-1]
game.results <- game.results[-1]
game.results <- game.results[-1]
View(game.results)
game.results <- game.results[-1,]
rownames(game.results) <- 1:nrow(game.results)
View(game.results)
ggplot(game.results) + geom_bar(aes(factor(X3)))
ggplot(game.results) + geom_bar(aes(factor(drop)))
# Looking at whether dead drop is included in predictions
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
deaddrop.predicted <- function(x,y) {
(y + 1) %in% x[[1]]
}
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else if(x[1]==y+1) {
TRUE
} else { FALSE }
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$deaddrop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$deaddrop[i]))
}
game.results$predicted <- predicted
game.results$trueprediction <- true
# Is a random number better at predicting the dead drop?
set.seed(50)
game.results$random <- sample(full.deck,100, replace=T)
library(dplyr)
game.results <- game.results %>% mutate(randompredicted = (deaddrop == random))
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$drop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$drop[i]))
}
game.results$predicted <- predicted
game.results$trueprediction <- true
# Is a random number better at predicting the dead drop?
set.seed(50)
game.results$random <- sample(full.deck,100, replace=T)
library(dplyr)
game.results <- game.results %>% mutate(randompredicted = (drop == random))
table(game.results$predicted)
table(game.results$trueprediction)
table(game.results$randompredicted)
set.seed(100)
game.results$random <- sample(full.deck,100, replace=T)
game.results <- game.results %>% mutate(randompredicted = (drop == random))
table(game.results$randompredicted)
table(game.results$predicted)
table(game.results$trueprediction)
set.seed(100)
game.results$random <- sample(full.deck,500, replace=T)
game.results <- game.results %>% mutate(randompredicted = (drop == random))
table(game.results$randompredicted)
game.results <- data.frame(prob0=c(0),
prob1=c(0),
prob2=c(0),
prob3=c(0),
prob4=c(0),
prob5=c(0),
drop=c(0))
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations <- replicate(500,simulate.game(3))
x <- 1
while(x <= 500){
game.results <- rbind(game.results,
c(calculate.probs(simulations[,x],0),
calculate.probs(simulations[,x],1),
calculate.probs(simulations[,x],2),
calculate.probs(simulations[,x],3),
calculate.probs(simulations[,x],4),
calculate.probs(simulations[,x],5),
simulations[,x]$drop))
x <- x + 1
}
game.results <- game.results[-1,]
rownames(game.results) <- 1:nrow(game.results)
ggplot(game.results) + geom_bar(aes(factor(drop)))
game.results$predictor <- apply(game.results,1,function(x) which(x==max(x)))
deaddrop.predicted <- function(x,y) {
(y + 1) %in% x[[1]]
}
deaddrop.true <- function(x,y) {
if(length(x) > 1) {
FALSE
} else if(x[1]==y+1) {
TRUE
} else { FALSE }
}
predicted <- c()
true <- c()
for(i in 1:length(game.results$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results$predictor[i],game.results$drop[i]))
true <- c(true, deaddrop.true(game.results$predictor[[i]],game.results$drop[i]))
}
game.results$predicted <- predicted
game.results$trueprediction <- true
set.seed(100)
game.results$random <- sample(full.deck,500, replace=T)
game.results <- game.results %>% mutate(randompredicted = (drop == random))
table(game.results$randompredicted)
table(game.results$predicted)
table(game.results$trueprediction)
table(game.results$trueprediction,game.results$randompredicted)
matrix(c(game.results$trueprediction,game.results$randompredicted),ncol=2,byrow = T)
matrix(c(table(game.results$trueprediction),table(game.results$randompredicted)),ncol=2,byrow = T)
colnames(simulation.outcome) <- c("FALSE","TRUE")
simulation.outcome <- matrix(c(table(game.results$trueprediction),table(game.results$randompredicted)),ncol=2,byrow = T)
colnames(simulation.outcome) <- c("FALSE","TRUE")
rownames(simulation.outcome) <- c("Probability Prediction","Random Prediction")
chisq.test(simulation.outcome)
ggplot(data) + geom_bar(aes(deaddrop/100))
library(ggplot2)
ggplot(data) + geom_bar(aes(deaddrop/100))
ggplot(data) + geom_bar(aes(deaddrop,..count../100))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals")
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Outcomes from 100 Simulations of Dead Drop") +
theme(title=element_text(size=20))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Outcomes from 100 Simulations of Dead Drop") +
theme(title=element_text(size=15,weight="bold"))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Outcomes from 100 Simulations of Dead Drop") +
theme(title=element_text(size=15,style="bold"))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Outcomes from 100 Simulations of Dead Drop") +
theme(title=element_text(size=15, vjust=2))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Outcomes from 100 Simulations of Dead Drop") +
theme(plot.title=element_text(size=15, face="bold",vjust=2))
ggplot(data) +
geom_bar(aes(deaddrop,..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("'Drop' Outcomes from 100 Simulations of Dead Drop") +
theme(plot.title=element_text(size=15, face="bold",vjust=2))
ggplot(data=data.frame(prob=c(4/13,3/13,2/13,2/13,1/13,1/13),
name=factor(c(0,1,2,3,4,5)))) +
geom_bar(aes(name,prob), stat="identity") +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("Mathematical Expectations of 'Drop' Outcomes") +
theme(plot.title=element_text(size=15, face="bold",vjust=2))
ggplot(game.results) + geom_bar(aes(factor(drop),..count../100)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("'Drop' Outcomes from 500 Simulations") +
theme(plot.title=element_text(size=15, face="bold",vjust=2))
ggplot(game.results) + geom_bar(aes(factor(drop),..count../500)) +
xlab("Cards") +
ylab("Percentage of Outcomes in Decimals") +
ggtitle("'Drop' Outcomes from 500 Simulations") +
theme(plot.title=element_text(size=15, face="bold",vjust=2))
simulation.table <- as.table(simulation.outcome)
simulation.table
chi.square <- function(a,b,c,d) {
(((a*d)-(b*c))^2 * (a + b + c + d))/((a + b) * (c + d) * (b + d) * (a + c))
}
simulation.table[1]
simulation.table[2]
simulation.table[3]
chi.square(simulation.table[1],
simulation.table[3],
simulation.table[2],
simulation.table[4])
simulation.table[4]
class(simulation.table[1])
chi.square(numeric(simulation.table[1]),
numeric(simulation.table[3]),
numeric(simulation.table[2]),
numeric(simulation.table[4]))
chi.square(simulation.table[1],
simulation.table[3],
simulation.table[2],
simulation.table[4])
chi.square(384,116,399,101)
chisq.test(simulation.table)
simulation.df <- as.data.frame(simulation.outcome)
View(simulation.df)
View(simulation.df)
simulation.df$observed
View(simulation.df)
simulation.df$expected <- c(0,0)
simulation.df$expected[1] <- 2
simulation.df$expected[1] <- sum(simulation.df$FALSE)*rowsum(simulation.df[,1])
simulation.df$expected[1] <- sum(simulation.df$FALSE)*rowsum(simulation.df[1,])
sum(simulation.df$FALSE)
sum(simulation.df[1,])
simulation.df$expected[1] <- sum(simulation.df[1,])*rowsum(simulation.df[1,])
simulation.df$expected[1] <- sum(simulation.df[1,])*rowsum(simulation.df[,1])
sum(simulation.df[,1])
simulation.df$expected[1] <- sum(simulation.df[1,])*sum(simulation.df[,1])
simulation.df$expected[1] <- sum(simulation.df[1,])*sum(simulation.df[,1])/1000
simulation.df$expected[1] <- (sum(simulation.df[1,])*sum(simulation.df[,1]))/1000
simulation.df$expected[1] <- (384+116)*(384+399)/1000
chi.square.df <- data.frame(observed=c(384,399,116,101))
View(chi.square.df)
chi.square.df$expected <- c((384+116)*(384+399)/1000,
(399+101)*(384+399)/1000,
(384+116)*(116+101)/1000,
(399+101)*(116+101)/1000)
library(dplyr)
chi.square.df <- chi.square.df %>%
mutate(`O-E` = observed-expected)
chi.square.df <- chi.square.df %>%
mutate(`O-E` = observed-expected) %>%
mutate(`|O-E|^2` = `O-E`^2)
chi.square.df <- chi.square.df %>%
mutate(`O-E` = observed-expected) %>%
mutate(`|O-E|^2` = `O-E`^2) %>%
mutate(`|O-E|^2/E` = `|O-E|^2`/expected)
sum(chi.square.df$`|O-E|^2/E`)
chisq.test(simulation.table)
(384+116)*(384+399)/1000
(399+101)*(384+399)/1000
test.statistic <- sum(chi.square.df$`|O-E|^2/E`)
df <- (2-1)*(2-1)
?chisq.test
chisq.test(simulation.table, correct=F)
actual.test <- chisq.test(simulation.table, correct=F)
summary(actual.test)
1-pchisq(test.statistic,df=df)
simulation.table
game1 <- simulate.game(2)
calculate.probs(game1,0)
game1
game1 <- simulate.game(2)
calculate.probs(game1,0)
game1$player1
game1$stash
calculate.probs(game1,4)
calculate.probs(game1,1)
calculate.probs(game1,2)
calculate.probs <- function(l,x) {
# information available to the player
available <- c(l$player1, l$stash)
# the number we want to run prob on
number <- table(grepl(x,available))[2]
if(is.na(number)) { number <- 0 }
# how many are normally in the deck
normal <- table(full.deck)[x+1]
pA <- normal/13
if(is.na(l$player3)) {
pBA <- choose(normal-1,number)/choose(12,7)
pB <- choose(normal,number)/choose(13,7)
} else {
pBA <- choose(normal-1,number)/choose(12,6)
pB <- choose(normal,number)/choose(13,6)
}
bayes.theorem(pA,pBA,pB)
}
calculate.probs(game1,2)
calculate.probs(game1,0)
calculate.probs(game1,1)
calculate.probs(game1,2)
calculate.probs(game1,3)
game1$stash
game1$player1
33+33+16
33+33+16+16
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(20)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(25)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(2)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(13)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(14)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(15)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(23)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(500)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
# set.seed for reproducing my simulations
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
game1 <- simulate.game(2)
game1 <- simulate.game(2)
game1 <- simulate.game(2)
game1 <- simulate.game(2)
game1 <- simulate.game(2)
indices <- c(0:4)
index <- 1
index %in% indices
index <- c(1,5)
index %in% indices
index[1] %in% indices
remove.values <- function(x,y) {
indices <- c()
for(i in 1:length(x)) {
index <- grep(x[i],y)
if(index[1] %in% indices) {
if(index[2] %in% indices) {
if(index[3] %in% indices){
if*index[4] %in% indices){
indices <- c(index[5],indices)
} else { indices <- c(index[4],indices) }
} else { indices <- c(index[3],indices) }
} else { indices <- c(index[2],indices) }
} else { indices <- c(index[1],indices) }
}
}
remove.values <- function(x,y) {
indices <- c()
for(i in 1:length(x)) {
index <- grep(x[i],y)
if(index[1] %in% indices) {
if(index[2] %in% indices) {
if(index[3] %in% indices){
if*index[4] %in% indices){
indices <- c(index[5],indices)
} else { indices <- c(index[4],indices) }
} else { indices <- c(index[3],indices) }
} else { indices <- c(index[2],indices) }
} else { indices <- c(index[1],indices) }
}
indices
}
remove.values <- function(x,y) {
indices <- c()
for(i in 1:length(x)) {
index <- grep(x[i],y)
if(index[1] %in% indices) {
if(index[2] %in% indices) {
if(index[3] %in% indices){
if*index[4] %in% indices){
indices <- c(index[5],indices)
} else { indices <- c(index[4],indices) }
} else { indices <- c(index[3],indices) }
} else { indices <- c(index[2],indices) }
} else { indices <- c(index[1],indices) }
}
print(indices)
}
remove.values <- function(x,y) {
indices <- c()
for(i in 1:length(x)) {
index <- grep(x[i],y)
if(index[1] %in% indices) {
if(index[2] %in% indices) {
if(index[3] %in% indices){
if(index[4] %in% indices){
indices <- c(index[5],indices)
} else { indices <- c(index[4],indices) }
} else { indices <- c(index[3],indices) }
} else { indices <- c(index[2],indices) }
} else { indices <- c(index[1],indices) }
}
print(indices)
}
set.seed(50)
# this runs the simulate game function 500 times and stores the results in an object
simulations2 <- replicate(500,simulate.game(2))
game.results2 <- data.frame(prob0=c(0),
prob1=c(0),
prob2=c(0),
prob3=c(0),
prob4=c(0),
prob5=c(0),
drop=c(0))
x <- 1
while(x <= 500){
game.results2 <- rbind(game.results2,
c(calculate.probs(simulations2[,x],0),
calculate.probs(simulations2[,x],1),
calculate.probs(simulations2[,x],2),
calculate.probs(simulations2[,x],3),
calculate.probs(simulations2[,x],4),
calculate.probs(simulations2[,x],5),
simulations2[,x]$drop))
x <- x + 1
}
game.results2 <- game.results2[-1,]
rownames(game.results2) <- 1:nrow(game.results2)
View(game.results2)
game.results2$predictor <- apply(game.results2,1,function(x) which(x==max(x)))
game.results2$predictor <- apply(game.results2,1,function(x) which(x==max(x)))
predicted <- c()
true <- c()
for(i in 1:length(game.results2$predictor)) {
predicted <- c(predicted,deaddrop.predicted(game.results2$predictor[i],game.results2$drop[i]))
true <- c(true, deaddrop.true(game.results2$predictor[[i]],game.results2$drop[i]))
}
game.results2$predicted <- predicted
game.results2$trueprediction <- true
# Is a random number better at predicting the dead drop?
set.seed(100)
game.results2$random <- sample(full.deck,500, replace=T)
game.results2 <- game.results2 %>% mutate(randompredicted = (drop == random))
require(dplyr)
game.results2 <- game.results2 %>% mutate(randompredicted = (drop == random))
simulation2.test <- chisq.test(simulation2.outcome, correct=F)
source('~/.active-rstudio-document', echo=TRUE)
simulation2.test$statistic
1-pchisq(simulation2.test$statistic,df=1)
